Object subclass: #GCRegistry	instanceVariableNames: 'git'	classVariableNames: 'Repositories RepositoryRoot'	poolDictionaries: ''	category: 'Gitocello-Core'!!GCRegistry methodsFor: 'helpers' stamp: 'tfel 9/8/2009 19:57'!run: aGitCommand in: aPackage		self run: aGitCommand in: aPackage with: (Array new: 0)		! !!GCRegistry methodsFor: 'helpers' stamp: 'tfel 9/8/2009 19:57'!run: aGitCommand in: aPackage with: anArgumentsArray	"Set the details we need and run"	git 		localPath: RepositoryRoot pathName, 					FileDirectory pathNameDelimiter asString, 					aPackage;		perform: aGitCommand withArguments: anArgumentsArray		! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/8/2009 20:03'!commit: aPackage	self 		createFilesFor: aPackage;		run: #add:		in: aPackage asString		with: (Array with: '*/*.st *.st');		run: #commit:		in: aPackage asString		with: (Array with: (self commitMessagesFor: aPackage))! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/7/2009 21:17'!createFilesFor: aPackage	(GCMapper newFor: aPackage)		repoDir: (RepositoryRoot directoryNamed: aPackage);		fileOutPackage.	(GCGstPackageWriter newFor: aPackage)		repoDir: (RepositoryRoot directoryNamed: aPackage);		fileOutPackageXml! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/7/2009 04:24'!createRepositoryFor: aPackage	(Repositories includesKey: aPackage) ifFalse: [		Repositories add: (aPackage -> Array new).		self createFilesFor: aPackage.		self run: #init in: aPackage asString].	self commit: aPackage! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/7/2009 03:26'!push: aPackage	self run: #push in: aPackage asString! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/7/2009 03:26'!removeRepositoryFor: aPackage	"This will not touch the filesystem, only our registry"	Repositories removeKey: aPackage ifAbsent: []! !!GCRegistry methodsFor: 'initialize-release' stamp: 'tfel 9/7/2009 03:32'!initialize	super initialize.	git := GCGitWrapper new! !!GCRegistry methodsFor: 'accessing' stamp: 'tfel 9/7/2009 03:33'!repositories	^ Repositories! !!GCRegistry methodsFor: 'monticello-helpers' stamp: 'tfel 9/7/2009 10:34'!commitMessagesFor: aPackage	"Creates a git-commit-msg from the non-commited Monticello versions"	| cr messages |	cr := Character lf asString.	messages := ((MCPackage named: aPackage) workingCopy ancestry 		breadthFirstAncestors copyWithoutAll: (self repositories at: aPackage))			inject: String new			into: [:string :next |				string := string, cr, cr, next date asString, ': ', next author, cr, next message].	self repositories 		at: aPackage 		put: (MCPackage named: aPackage) workingCopy ancestry breadthFirstAncestors.	^ messages replaceAll: Character cr with: Character lf		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GCRegistry class	instanceVariableNames: 'instance'!!GCRegistry class methodsFor: 'class initialization' stamp: 'tfel 9/7/2009 03:42'!createDirectoryStructure: aString	"Create the directory structure beneath the current image"	| repoDir |	repoDir := FileDirectory default.	(aString findBetweenSubStrs: FileDirectory pathNameDelimiter asString)		do: [:each |			(repoDir directoryExists: each)				ifFalse: [repoDir createDirectory: each].			repoDir := repoDir directoryNamed: each].	^ repoDir! !!GCRegistry class methodsFor: 'class initialization' stamp: 'tfel 9/7/2009 03:31'!initialize		super initialize.	self 		repositoryRoot: 'package-cache/git-repositories';		repositories: Dictionary new;		instance: nil! !!GCRegistry class methodsFor: 'class initialization' stamp: 'tfel 9/7/2009 03:32'!new	"One global Registry is enough"	^ self instance 		ifNil: [super new]		ifNotNil: [instance]! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 03:31'!instance		^ instance! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 03:31'!instance: anObject		instance := anObject! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 02:39'!repositories	^ Repositories! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 02:39'!repositories: aDictionary	Repositories := aDictionary! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 03:09'!repositoryRoot	"Return the FileDirectory"	^ RepositoryRoot! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 03:12'!repositoryRoot: aStringOrDirectory	"Set the FileDirectory either directly or from String"	RepositoryRoot := aStringOrDirectory isString 		ifTrue: [self createDirectoryStructure: aStringOrDirectory]		ifFalse: [self createDirectoryStructure: aStringOrDirectory pathName]			! !GCRegistry initialize!