Object subclass: #GCRegistry	instanceVariableNames: 'git'	classVariableNames: 'Repositories RepositoryRoot'	poolDictionaries: ''	category: 'Gitocello-Core'!!GCRegistry commentStamp: 'tfel 9/8/2009 20:27' prior: 0!In my class I keep all the information on where to create/find git repositories in the file system (RepositoryRoot) and which Repositories have been created and how far they are along compared to their Monticello history.My instance (of which there is only one) is used to create, remove and update repositories through the interface exposed in the 'commands' category.!!GCRegistry methodsFor: 'helpers' stamp: 'tfel 9/8/2009 19:57'!run: aGitCommand in: aPackage		self run: aGitCommand in: aPackage with: (Array new: 0)		! !!GCRegistry methodsFor: 'helpers' stamp: 'tfel 9/8/2009 19:57'!run: aGitCommand in: aPackage with: anArgumentsArray	"Set the details we need and run"	git 		localPath: RepositoryRoot pathName, 					FileDirectory pathNameDelimiter asString, 					aPackage;		perform: aGitCommand withArguments: anArgumentsArray		! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/10/2009 09:09'!commit: aPackage	"This is part of the class interface - try not to break it"	self 		createFilesFor: aPackage;		run: #add:			in: aPackage asString			with: (Array with: '*/*.st *.st package.xml');		run: #commit:			in: aPackage asString			with: (Array with: (self commitMessagesFor: aPackage))! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/8/2009 20:28'!createRepositoryFor: aPackage	"This will do everything in its power to commit that package to git!!"	(Repositories includesKey: aPackage) ifFalse: [		Repositories add: (aPackage -> Array new).		self createFilesFor: aPackage.		self run: #init in: aPackage asString].	self commit: aPackage! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/8/2009 20:17'!push: aPackage	"This might be removed at some time in the future"	self run: #push in: aPackage asString! !!GCRegistry methodsFor: 'commands' stamp: 'tfel 9/8/2009 20:27'!removeRepositoryFor: aPackage	"This will not touch the filesystem, only our registry"	Repositories removeKey: aPackage ifAbsent: []! !!GCRegistry methodsFor: 'initialize-release' stamp: 'tfel 9/7/2009 03:32'!initialize	super initialize.	git := GCGitWrapper new! !!GCRegistry methodsFor: 'accessing' stamp: 'tfel 9/7/2009 03:33'!repositories	^ Repositories! !!GCRegistry methodsFor: 'monticello-helpers' stamp: 'tfel 9/10/2009 09:40'!commitMessagesFor: aPackage	"Creates a git-commit-msg from the non-commited Monticello versions"	| cr messages |	cr := Character lf asString.	messages := ((MCPackage named: aPackage) workingCopy ancestry 		breadthFirstAncestors copyWithoutAll: (self repositories at: aPackage))			inject: String new			into: [:string :next |				string := string, cr, cr, next date asString, ': ', next author, cr, next message].	self repositories 		at: aPackage 		put: (MCPackage named: aPackage) workingCopy ancestry breadthFirstAncestors.	^ self escapeForBash: messages 		! !!GCRegistry methodsFor: 'monticello-helpers' stamp: 'tfel 9/10/2009 09:41'!escapeForBash: aString	^ (((aString 		replaceAll: Character cr with: Character lf)		replaceAll: $!! with: $.)		replaceAll: $" with: $')		replaceAll: $$ with: $S		! !!GCRegistry methodsFor: 'fileOut' stamp: 'tfel 9/7/2009 21:17'!createFilesFor: aPackage	(GCMapper newFor: aPackage)		repoDir: (RepositoryRoot directoryNamed: aPackage);		fileOutPackage.	(GCGstPackageWriter newFor: aPackage)		repoDir: (RepositoryRoot directoryNamed: aPackage);		fileOutPackageXml! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GCRegistry class	instanceVariableNames: 'instance'!!GCRegistry class methodsFor: 'class initialization' stamp: 'tfel 9/7/2009 03:42'!createDirectoryStructure: aString	"Create the directory structure beneath the current image"	| repoDir |	repoDir := FileDirectory default.	(aString findBetweenSubStrs: FileDirectory pathNameDelimiter asString)		do: [:each |			(repoDir directoryExists: each)				ifFalse: [repoDir createDirectory: each].			repoDir := repoDir directoryNamed: each].	^ repoDir! !!GCRegistry class methodsFor: 'class initialization' stamp: 'tfel 9/7/2009 03:31'!initialize		super initialize.	self 		repositoryRoot: 'package-cache/git-repositories';		repositories: Dictionary new;		instance: nil! !!GCRegistry class methodsFor: 'class initialization' stamp: 'tfel 9/9/2009 13:44'!new	"One global Registry is enough"	^ self instance 		ifNil: [instance := super new]		ifNotNil: [instance]! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 03:31'!instance		^ instance! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 03:31'!instance: anObject		instance := anObject! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 02:39'!repositories	^ Repositories! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 02:39'!repositories: aDictionary	Repositories := aDictionary! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 03:09'!repositoryRoot	"Return the FileDirectory"	^ RepositoryRoot! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/7/2009 03:12'!repositoryRoot: aStringOrDirectory	"Set the FileDirectory either directly or from String"	RepositoryRoot := aStringOrDirectory isString 		ifTrue: [self createDirectoryStructure: aStringOrDirectory]		ifFalse: [self createDirectoryStructure: aStringOrDirectory pathName]			! !!GCRegistry class methodsFor: 'class variables' stamp: 'tfel 9/10/2009 09:27'!tracksPackage: aPackageNameOrMCPackage	^ (self repositories keys includes: aPackageNameOrMCPackage)		or: [self repositories keys includes: aPackageNameOrMCPackage name]! !!GCRegistry class methodsFor: 'error handling' stamp: 'tfel 9/9/2009 13:43'!doesNotUnderstand: aMessage	(self new respondsTo: aMessage selector)		ifTrue: [^ self instance 					perform: aMessage selector 					withArguments: aMessage arguments].	^ super doesNotUnderstand: aMessage! !GCRegistry initialize!