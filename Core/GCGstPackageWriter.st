Object subclass: #GCGstPackageWriter	instanceVariableNames: 'packageName packageXmlStream newline repoDir'	classVariableNames: ''	poolDictionaries: ''	category: 'Gitocello-Core'!!GCGstPackageWriter methodsFor: 'accessing' stamp: 'tfel 9/7/2009 21:25'!newline	"Answer the value of newline"	^ newline! !!GCGstPackageWriter methodsFor: 'accessing' stamp: 'tfel 9/7/2009 21:25'!newline: anObject	"Set the value of newline"	newline := anObject! !!GCGstPackageWriter methodsFor: 'accessing' stamp: 'tfel 9/7/2009 20:47'!packageName	"Answer the value of packageName"	^ packageName! !!GCGstPackageWriter methodsFor: 'accessing' stamp: 'tfel 9/7/2009 20:47'!packageName: anObject	"Set the value of packageName"	packageName := anObject! !!GCGstPackageWriter methodsFor: 'accessing' stamp: 'tfel 9/7/2009 20:47'!packageXmlStream	"Answer the value of packageXmlStream"	^ packageXmlStream! !!GCGstPackageWriter methodsFor: 'accessing' stamp: 'tfel 9/7/2009 20:47'!packageXmlStream: anObject	"Set the value of packageXmlStream"	packageXmlStream := anObject! !!GCGstPackageWriter methodsFor: 'accessing' stamp: 'tfel 9/7/2009 21:25'!repoDir	"Answer the value of repoDir"	^ repoDir! !!GCGstPackageWriter methodsFor: 'accessing' stamp: 'tfel 9/7/2009 21:28'!repoDir: aDirectory	"Set the value of repoDir"	aDirectory isString		ifTrue: [repoDir := aDirectory]		ifFalse: [repoDir := aDirectory pathName]! !!GCGstPackageWriter methodsFor: 'literals' stamp: 'tfel 9/7/2009 20:55'!postfix	^ '</package>'! !!GCGstPackageWriter methodsFor: 'literals' stamp: 'tfel 9/7/2009 21:39'!preamble	^ '<package>', 		newline asString, 		'<!!-- THIS FILE IS AUTO-GENERATED!! EDITS _WILL_ BE LOST ON UPDATE!!!! --!!>', 		newline asString,		'<name>', self packageName, '</name>',  		newline asString,		'<namespace>', self packageName, '</namespace>', 		newline asString! !!GCGstPackageWriter methodsFor: 'stream-writing' stamp: 'tfel 9/7/2009 21:18'!createPackageXml	self packageXmlStream 		reset;		nextPutAll: self preamble.	self requiredPackages do: [:pkg | self require: pkg].	"self testing."	self classes do: [:class | self fileIn: class].	self packageXmlStream nextPutAll: self postfix! !!GCGstPackageWriter methodsFor: 'stream-writing' stamp: 'tfel 9/7/2009 20:58'!fileIn: aClass	"Create the filein for this particular class in the conventional subfolder"	| subfolder |	subfolder := (aClass category asString findBetweenSubStrs: '-') last.	self packageXmlStream 		nextPutAll: '<filein>';		nextPutAll: subfolder;		nextPut: FileDirectory pathNameDelimiter;		nextPutAll: aClass name asString;		nextPutAll: '.st</filein>';		nextPut: newline! !!GCGstPackageWriter methodsFor: 'stream-writing' stamp: 'tfel 9/7/2009 20:58'!require: aPackage	self packageXmlStream		nextPutAll: '<prereq>';		nextPutAll: aPackage;		nextPutAll: '</prereq>';		nextPut: newline! !!GCGstPackageWriter methodsFor: 'initialize-release' stamp: 'tfel 9/7/2009 21:32'!initialize	super initialize.	newline := Character lf. "This should be configurable"	self packageXmlStream: (WriteStream on: (String new: 100))! !!GCGstPackageWriter methodsFor: 'information-retrieval' stamp: 'tfel 9/7/2009 21:31'!classes	| system |	system := Smalltalk organization.	^ ((system categoriesMatching: self packageName) union:		(system categoriesMatching: self packageName, '-*'))			inject: OrderedCollection new			into: [:list :next | 				list addAll: (system superclassOrder: next)]! !!GCGstPackageWriter methodsFor: 'information-retrieval' stamp: 'tfel 9/7/2009 20:36'!requiredPackages	^ (MCPackage named: self packageName) workingCopy requiredPackages! !!GCGstPackageWriter methodsFor: 'fileOut' stamp: 'tfel 9/7/2009 21:27'!fileOutPackageXml	| fileName converter file |	self createPackageXml.	self packageXmlStream contents isAsciiString 		ifTrue: [converter := MacRomanTextConverter new]		ifFalse: [converter := UTF8TextConverter new].	fileName := self repoDir, FileDirectory pathNameDelimiter asString, 'package.xml'.	file := MultiByteFileStream new open: fileName forWrite: true.	file 	ifNil: [self error: 'Cannot open file'].	file text;		converter: converter;		nextPutAll: packageXmlStream contents;		close! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GCGstPackageWriter class	instanceVariableNames: ''!!GCGstPackageWriter class methodsFor: 'instance creation' stamp: 'tfel 9/7/2009 21:19'!newFor: aPackage	^ self new		packageName: aPackage;		yourself! !