Object subclass: #GCMapper	instanceVariableNames: 'systemOrganizer packageName repoDir'	classVariableNames: ''	poolDictionaries: ''	category: 'Gitocello-Core'!!GCMapper methodsFor: 'fileOut' stamp: 'tfel 9/6/2009 22:19'!fileOutCategory: aCategory	"This creates a sub-folder in the repository for the categories classes"	| subfolder |	subfolder := (aCategory asString findBetweenSubStrs: '-') last.	(repoDir directoryExists: subfolder)		ifFalse: [repoDir createDirectory: subfolder].	(systemOrganizer superclassOrder: aCategory) do: [:each | 		self 			fileOutClass: each 			in: (repoDir directoryNamed: subfolder)]! !!GCMapper methodsFor: 'fileOut' stamp: 'tfel 9/7/2009 09:52'!fileOutClass: aClass in: aFileDirectory	"This files out the class in the according sub-folder"	| stream path |	stream := WriteStream on: (String new: 100).	aClass fileOutOn: stream moveSource: false toFile: 0.	path := (aFileDirectory pathName, FileDirectory pathNameDelimiter asString, aClass name).	self writeSourceCodeFrom: stream to: path! !!GCMapper methodsFor: 'fileOut' stamp: 'tfel 9/6/2009 22:16'!fileOutPackage	"Files out the entire package into a folder structure"	repoDir exists		ifFalse: [repoDir containingDirectory createDirectory: self packageName].	((systemOrganizer categoriesMatching: self packageName)		union: (systemOrganizer categoriesMatching: self packageName, '-*'))			do: [:category | self fileOutCategory: category]! !!GCMapper methodsFor: 'fileOut' stamp: 'tfel 9/7/2009 09:53'!writeSourceCodeFrom: aStream to: aFile	| converter f fileName |	aStream contents isAsciiString 		ifTrue: [converter := MacRomanTextConverter new]		ifFalse: [converter := UTF8TextConverter new].	fileName := aFile, (FileDirectory dot, FileStream st).	f := MultiByteFileStream new open: fileName forWrite: true.	f ifNil: [^ self error: 'Cannot open file'].	(converter isMemberOf: UTF8TextConverter)		ifTrue: [f binary.			UTF8TextConverter writeBOMOn: f].	f text.	f converter: converter.	f nextPutAll: aStream contents.	f close.! !!GCMapper methodsFor: 'accessing' stamp: 'tfel 9/6/2009 20:33'!packageName	"Answer the value of packageName"	^ packageName! !!GCMapper methodsFor: 'accessing' stamp: 'tfel 9/6/2009 20:33'!packageName: anObject	"Set the value of packageName"	packageName := anObject! !!GCMapper methodsFor: 'accessing' stamp: 'tfel 9/7/2009 02:29'!repoDir	^ repoDir! !!GCMapper methodsFor: 'accessing' stamp: 'tfel 9/7/2009 03:07'!repoDir: aFileDirectory	repoDir := aFileDirectory! !!GCMapper methodsFor: 'initialize-release' stamp: 'tfel 9/7/2009 02:29'!initialize	super initialize.	systemOrganizer := SystemOrganizer allInstances first! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GCMapper class	instanceVariableNames: ''!!GCMapper class methodsFor: 'instance creation' stamp: 'tfel 9/6/2009 20:49'!newFor: aPackage	^ self basicNew		packageName: aPackage;		initialize;		yourself! !